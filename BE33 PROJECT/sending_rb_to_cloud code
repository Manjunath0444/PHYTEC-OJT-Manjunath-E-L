#include <errno.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <termios.h>
#include <unistd.h>

int set_interface_attribs(int fd, int speed) {
    struct termios tty;

    if (tcgetattr(fd, &tty) < 0) {
        printf("Error from tcgetattr: %s\n", strerror(errno));
        return -1;
    }

    cfsetispeed(&tty, (speed_t)speed);
    cfsetospeed(&tty, (speed_t)speed);

    tty.c_cflag |= (CLOCAL | CREAD);    /* ignore modem controls */
    tty.c_cflag &= ~CSIZE;
    tty.c_cflag |= CS8;         /* 8-bit characters */
    tty.c_cflag &= ~PARENB;     /* no parity bit */
    tty.c_cflag &= ~CSTOPB;     /* only need 1 stop bit */
    tty.c_cflag &= ~CRTSCTS;    /* no hardware flow control */

    tty.c_iflag = IGNPAR;
    tty.c_lflag = 0;

    tty.c_cc[VMIN] = 1;
    tty.c_cc[VTIME] = 1;

    if (tcsetattr(fd, TCSANOW, &tty) != 0) {
        printf("Error from tcsetattr: %s\n", strerror(errno));
        return -1;
    }
    return 0;
}

int main() {
    char *portname = "/dev/ttyS3";
    int fd;
    int wlen, rdlen;

    // First set of commands
    char arr1[] = "CMD+RESET=0\r\n";
    char arr4[] = "CMD+ADV=1\r\n";
    char arr5[] = "CMD+TXPWR=-4\r\n";
    char arr6[] = "CMD+SCAN=1\r\n";
    char arr8[] = "CMD+CON=1,fab321a20744\r\n";

    // Second set of commands
    char arr1_new[] = "CMD+RESET\r\n";
    char arr2[] = "CMD+WIFIMODE=1\r\n";
    /*char arr[] = "CMD+CONTOAP=\"Phani\",\"123456789\"\r\n";
    char arr3[] = "CMD+MQTTNETCFG=dev.rightech.io,1883\r\n";
    char arr4_new[] = "CMD+MQTTCONCFG=3,mqtt-panidharece2023-vt8h5q,,,,,,,,,\r\n";
    char arr5_new[] = "CMD+MQTTSTART=1\r\n";
    char arr6_new[] = "CMD+MQTTSUB=base/relay/led1\r\n";*/

    unsigned char buf[192];

    fd = open(portname, O_RDWR | O_NOCTTY | O_SYNC);
    if (fd < 0) {
        printf("Error opening %s: %s\n", portname, strerror(errno));
        return -1;
    }

    // Set serial interface attributes for the first set of commands
    set_interface_attribs(fd, B115200);

    printf("%s", arr1);
    wlen = write(fd, arr1, sizeof(arr1) - 1);
    tcdrain(fd);  // Flush output

    sleep(2);

    printf("%s", arr4);
    wlen = write(fd, arr4, sizeof(arr4) - 1);
    tcdrain(fd);  // Flush output

    sleep(2);

    printf("%s", arr5);
    wlen = write(fd, arr5, sizeof(arr5) - 1);
    tcdrain(fd);  // Flush output

    sleep(2);

    printf("%s", arr6);
    wlen = write(fd, arr6, sizeof(arr6) - 1);
    tcdrain(fd);  // Flush output

    sleep(2);

    printf("%s", arr8);
    wlen = write(fd, arr8, sizeof(arr8) - 1);
    tcdrain(fd);  // Flush output

    sleep(2);

    // Set serial interface attributes for the second set of commands
    set_interface_attribs(fd, B38400);

    printf("%s", arr1_new);
    wlen = write(fd, arr1_new, sizeof(arr1_new) - 1);
    tcdrain(fd);  // Flush output

    sleep(2);

    printf("%s", arr2);
    wlen = write(fd, arr2, sizeof(arr2) - 1);
    tcdrain(fd);  // Flush output

    sleep(2);

   /* printf("%s", arr);
    wlen = write(fd, arr, sizeof(arr) - 1);
    tcdrain(fd);  // Flush output

    sleep(2);

    printf("%s", arr3);
    wlen = write(fd, arr3, sizeof(arr3) - 1);
    tcdrain(fd);  // Flush output

    sleep(2);

    printf("%s", arr4_new);
    wlen = write(fd, arr4_new, sizeof(arr4_new) - 1);
    tcdrain(fd);  // Flush output

    sleep(2);

    printf("%s", arr5_new);
    wlen = write(fd, arr5_new, sizeof(arr5_new) - 1);
    tcdrain(fd);  // Flush output

    sleep(2);

    printf("%s", arr6_new);
    wlen = write(fd, arr6_new, sizeof(arr6_new) - 1);
    tcdrain(fd);  // Flush output

    sleep(2);*/

    while (1) {
        // Read data from the module
        rdlen = read(fd, buf, sizeof(buf) - 1);
        if (rdlen > 0) {
            buf[rdlen] = '\0';
            printf("Received data: %s\n", buf);
            int ret = snprintf(buffer, sizeof(buffer), "CMD+MQTTPUB=base/state/temperature,%s
                                                                      
    if (ret < 0) {                                                    
                                                                      
    } else {                                                                
                                                                                
        ssize_t wlen = write(fd, buffer, ret);                                  
        sleep(3);                                                               
        if (wlen == -1) {                                                       
                                                                                
        }  
        }
    }

    close(fd);
    return 0;
}

